1:jquery修改input的值，不能使用获取值的方法
	$(".sendmsg input").val(),  
	$(".sendmsg textarea,input").val(" ");	  值写在后面的括号里才能设置；
2：手机端适配也是非常有问题的，不能是普通的写像素大小；
	不是不能写成普通像素大小，而是当原来设置的宽度远远大于屏幕宽度时，网页会严重缩放，
	解决办法是把所有的超宽的元素的宽度从新设定
3：移动端适配
	media="screen and (min-width: 767px) and (max-width: 1129px)"
	css里面可以不写尺寸，html里面必须写
	html里面也可以不写，css里面可以每个尺寸一个大括号就行；
	常用尺寸：大屏幕：大于1200px；   (min-width: 1130px) 
			  默认：980px；
			  平板：大于768px；  (min-width: 767px) and (max-width: 1129px)
			  手机 ：小于480px； (max-width: 500px)
4：html-css-js-jquery-php-mysql-nodejs-es6-git-(angular react  veu) -webpack-react router-web安全--动画
	关键是要能够利用这些东西作出各种效果来才行
                               /*            css知识点开始                               */
知识点：1：响应式布局，已经解决，
	2：css动画，画图；
	动画：百分比和from-to效果是一样的；animation-delay:2s;  -direction:normal/forwards（保持最后状态）
	animation:名字  周期时长     速度曲线     开始延迟  播放次数  是否逆向播放  运行或者暂停
		    name  duration(num) linear(匀速)   -iteration-count:num        -play-state:running /stop
		    					ease(慢-快-慢)
		    					ease-in(慢-快)
		    				ease-in-out(慢)
		    				cubic-bezier(n,n,n)速度曲线
5：2d变换---移动，缩放，转动，拉长，拉伸
	transform:translate(px,px)  rotate(角度deg)  scale(x,y)倍数  skew(xdeg,ydeg)  matrix(全部组合)
				位移，x , y      顺时针旋转     拉伸几倍        翻转角度,x,y      六个参数
    transform-origin:20% 40%;  旋转的中心点，点在哪里，定在哪里，其他地方围绕此旋转
6：3d变换
	transform:rotateX(120deg);  就是rotate有一点点变化；原点是元素的中心
	transform-style: 子元素是继续在2d还是跟随3d；flat:2d    preserve-3d  一起3d显示
	perspective:   设置父元素的
	perspective-orgin:
	backface-visibility:设置背面是否可见，visibilitey  hidden  就是元素透不透明，旋转之后还能看到后面
7：html引用php文件 <?php include 'footer.php';?>
8:纯粹css修改复选框的样式是可以的，主要利用label和伪元素，以及动画
	1:label里面for的是input对应 id；
	2：原来的选框被隐藏了
	3：利用span，以及伪元素新增加了一个形状
	4：当checked处于被选中时，触发了一个事件
	5:使用input[type="checkbox"]=checked是可以的
	6：最终证明简单的是可以的
	7:伪元素必须设置inline-block，要不然宽高失效

                      /*             jquery部分              */
1：jquery分页插件
	1：在逻辑架构上
		1：每循环一次，增加一次ul，然后判断ul的高度，小于预设值就往里面增加li
		2：大于ul的高度，就往页面的特定盒子里面增加一个按钮；同时设置其他的ul隐藏起来
	2：遇到的问题
		1：在最外面需要一个初始值，用于记录已经增加了多少个li
		2：在最外层的循环里必须让i的数值小于数组总长度，而这个总长度是余下的，
		3：不仅仅要小于剩下的，i的本身是增长的，所以需要另一个值把i值增加到剩余长度里，抵消i的增长；
		4：在ajax末尾用delegate的方法操作动态元素是没有问题的。
		5：在ajax末尾操作动态元素的属性也是没问题的；前面报错是自己写的问题
		6：在append方法后面是不能进行运算的，要把运算放在前面才行，
	3：类名指向解释：
		1：msg是所有ul的父元素，是最外面的容器
		2： btn是新增的按钮的父元素，
		3：data是ajax从PHP拿回来的数据，里面的名字要改成自己的；
	var len=data.length;
	var ulx=0;
	var x=0;
	for(i=0;i<len-ulx+x;i++){
		$(".msg").append("<ul></ul>");
		for(s=0;s<12;s++){
			var h=parseInt($(".msg ul").eq(i).css("height"));
			console.log(h);
			if(h>85){
				if(s+ulx<=len){
					$(".msg ul").not($(".msg ul").eq(0)).css("display","none");
					var n=i+1;
					$(".btn").append("<button>"+n+"</button>");
					x=i;
					ulx=ulx+s;
					break;
				}
			}else{//顺序错了就会报错；不应该是顺序的问题；
				$(".msg ul").eq(i).append("<li>"+data[s+ulx].msg+"</li>");
			}
		}
		
	}
2：<a href="javascript:;">  a标签取消默认行为






	/*            css知识点结束                               */

3：利用ajax里面是可以实现即时在线聊天的；只要在里面进行定时刷新对比就数据
	有不同就发布到页面上来就行，其实仅仅一张页面用于存储数据，也是可以实现即时
	通信，只是数据不能保存而已。
4：面试官也会考验职业素养，职业素养只能经过大量的时间经验的沉淀
快速提高职业素养1：刷题；来弥补一部分；单标签闭合
	定义全局样式的方式：
	面试1：基础知识----面试2：


1：正则表达式 ---用来匹配字符串
普通字符-----特殊字符(元字符)
var str = "abc123def";
var patt1 = /[0-9]+/;
document.write(str.match(patt1));  //  打印出123
//正斜杠是必须的，方括号是必须的，里面是规则，加号代表所有匹配，去掉加号只显示一个
^[0-9]+abc$
上尖括号：匹配字符串的起始位置
[0-9]+  ：匹配多个字符：[0-9]：匹配单个数字，+匹配一个或者多个
abc$ 匹配字母abc并以abc结尾，
$ ：为匹配输入字符串的结束位置

---匹配以数字开头，并以 abc 结尾的字符串。
var str = "123abc";
var patt1 = /^[0-9]+abc$/;
document.write(str.match(patt1));

上尖括号+以什么开头+以什么结束+$

runoo+b，可以匹配 runoob、runooob、runoooooob 等，+ 号代表前面的字符必须至少出现一次（1次或多次）
runoo*b，可以匹配 runob、runoob、runoooooob 等，* 号代表字符可以不出现，也可以出现一次或者多次（0次、或1次、或多次）
colou?r 可以匹配 color 或者 colour，? 问号代表前面的字符最多只可以出现一次（0次、或1次）

规则可以由小的片段组成大的片段

非打印字符
\cx	匹配由x指明的控制字符。例如， \cM 匹配一个 Control-M 或回车符。x 的值必须为 A-Z 或 a-z 之一。否则，将 c 视为一个原义的 'c' 字符。   ---这个看不懂
\f	匹配一个换页符。等价于 \x0c 和 \cL
\n	匹配一个换行符。等价于 \x0a 和 \cJ。
\r	匹配一个回车符。等价于 \x0d 和 \cM。
\s	匹配任何空白字符，包括空格、制表符、换页符等等。等价于 [ \f\n\r\t\v]。
\S	匹配任何非空白字符。等价于 [^ \f\n\r\t\v]。
\t	匹配一个制表符。等价于 \x09 和 \cI。
\v	匹配一个垂直制表符。等价于 \x0b 和 \cK。

特殊字符
如果要查找字符串中的 * 符号，则需要对 * 进行转义，即在其前加一个 \: runo\*ob 匹配 runo*ob。---需要转换
$	匹配输入字符串的结尾位置。如果设置了 RegExp 对象的 Multiline 属性，则 $ 也匹配 '\n' 或 '\r'。要匹配 $ 字符本身，请使用 \$。
( )	标记一个子表达式的开始和结束位置。子表达式可以获取供以后使用。要匹配这些字符，请使用 \( 和 \)。
*	匹配前面的子表达式零次或多次。要匹配 * 字符，请使用 \*。
+	匹配前面的子表达式一次或多次。要匹配 + 字符，请使用 \+。
.	匹配除换行符 \n 之外的任何单字符。要匹配 . ，请使用 \. 。
[	标记一个中括号表达式的开始。要匹配 [，请使用 \[。
?	匹配前面的子表达式零次或一次，或指明一个非贪婪限定符。要匹配 ? 字符，请使用 \?。
\	将下一个字符标记为或特殊字符、或原义字符、或向后引用、或八进制转义符。例如， 'n' 匹配字符 'n'。'\n' 匹配换行符。序列 '\\' 匹配 "\"，而 '\(' 则匹配 "("。            "
^	匹配输入字符串的开始位置，除非在方括号表达式中使用，此时它表示不接受该字符集合。要匹配 ^ 字符本身，请使用 \^。
{	标记限定符表达式的开始。要匹配 {，请使用 \{。
|	指明两项之间的一个选择。要匹配 |，请使用 \|。

限定符
限定符用来指定正则表达式的一个给定组件必须要出现多少次才能满足匹配。有 * 或 + 或 ? 或 {n} 或 {n,} 或 {n,m} 共6种。
*	匹配前面的子表达式零次或多次。例如，zo* 能匹配 "z" 以及 "zoo"。* 等价于{0,}。
+	匹配前面的子表达式一次或多次。例如，'zo+' 能匹配 "zo" 以及 "zoo"，但不能匹配 "z"。+ 等价于 {1,}。
?	匹配前面的子表达式零次或一次。例如，"do(es)?" 可以匹配 "do" 、 "does" 中的 "does" 、 "doxy" 中的 "do" 。? 等价于 {0,1}。
{n}	n 是一个非负整数。匹配确定的 n 次。例如，'o{2}' 不能匹配 "Bob" 中的 'o'，但是能匹配 "food" 中的两个 o。
{n,}	n 是一个非负整数。至少匹配n 次。例如，'o{2,}' 不能匹配 "Bob" 中的 'o'，但能匹配 "foooood" 中的所有 o。'o{1,}' 等价于 'o+'。'o{0,}' 则等价于 'o*'。
{n,m}	m 和 n 均为非负整数，其中n <= m。最少匹配 n 次且最多匹配 m 次。例如，"o{1,3}" 将匹配 "fooooood" 中的前三个 o。'o{0,1}' 等价于 'o?'。请注意在逗号和两个数之间不能有空格。

<H1>Chapter 1 - 介绍正则表达式</H1>  </>
贪婪：下面的表达式匹配从开始小于符号 (<) 到关闭 H1 标记的大于符号 (>) 之间的所有内容。
/<.*>/
非贪婪：如果您只需要匹配开始和结束 H1 标签，下面的非贪婪表达式只匹配 <H1>。
/<.*?>/

定位符
定位符用来描述字符串或单词的边界，^ 和 $ 分别指字符串的开始与结束，\b 描述单词的前或后边界，\B 表示非单词边界。
^	匹配输入字符串开始的位置。如果设置了 RegExp 对象的 Multiline 属性，^ 还会与 \n 或 \r 之后的位置匹配。
$	匹配输入字符串结尾的位置。如果设置了 RegExp 对象的 Multiline 属性，$ 还会与 \n 或 \r 之前的位置匹配。
\b	匹配一个字边界，即字与空格间的位置。
\B	非字边界匹配。




















首先是各种规则：语言，语法，规则，api
然后是活用：项目思维能力；--跟写诗一样，把文字组成有意义而且被人喜欢的段落






